(function () {
  'use strict';

  /**
   * CSS to stabilize visual tests:
   * - Hide carets
   * - Hide scrollbars
   * - Support [data-visual-test]
   * - Support [data-visual-test-no-radius]
   */ const GLOBAL_CSS = `
/* Hide carets */
* {
  caret-color: transparent !important;
}

/* Hide scrollbars */
::-webkit-scrollbar {
  display: none !important;
}

/* Make the element transparent */
[data-visual-test="transparent"] {
  color: transparent !important;
  font-family: monospace !important;
  opacity: 0 !important;
}

/* Remove the element */
[data-visual-test="removed"] {
  display: none !important;
}

/* Disable radius */
[data-visual-test-no-radius]:not([data-visual-test-no-radius="false"]) {
  border-radius: 0 !important;
}
`;
  /**
   * Set the position of an element and backup the previous one.
   */ function setAndBackupSpellcheck(element, spellcheck) {
      element.setAttribute("data-argos-bck-position", element.getAttribute("spellcheck") ?? "unset");
      element.setAttribute("spellcheck", spellcheck);
  }
  const SPELL_CHECK_QUERY = "[contenteditable]:not([contenteditable=false]):not([spellcheck=false]), input:not([spellcheck=false]), textarea:not([spellcheck=false])";
  /**
   * Disable spellcheck to avoid displaying markers.
   */ function disableSpellCheck(document) {
      const inputs = document.querySelectorAll(SPELL_CHECK_QUERY);
      inputs.forEach((element)=>{
          if (!checkIsHTMLElement(element)) return;
          setAndBackupSpellcheck(element, "false");
      });
  }
  /**
   * Restore spellcheck attribute.
   */ function restoreSpellCheck(document) {
      const inputs = document.querySelectorAll(SPELL_CHECK_QUERY);
      inputs.forEach((input)=>{
          const spellcheck = input.getAttribute("data-argos-bck-spellcheck");
          if (spellcheck === "unset") {
              input.removeAttribute("spellcheck");
          } else if (spellcheck) {
              input.setAttribute("spellcheck", spellcheck);
          }
      });
  }
  /**
   * Inject global styles in the DOM.
   */ function injectGlobalStyles(document, css, id) {
      const style = document.createElement("style");
      style.textContent = css;
      style.id = id;
      document.head.appendChild(style);
  }
  /**
   * Remove global styles from the DOM.
   */ function removeGlobalStyles(document, id) {
      const style = document.getElementById(id);
      if (style) {
          style.remove();
      }
  }
  const checkIsHTMLElement = (element)=>{
      return "style" in element;
  };
  /**
   * Set the position of an element and backup the previous one.
   */ function setAndBackupPosition(element, position) {
      element.setAttribute("data-argos-bck-position", element.style.position ?? "unset");
      element.style.position = position;
  }
  /**
   * Stabilize sticky and fixed elements.
   */ function stabilizeElementPositions(document) {
      const window = document.defaultView;
      if (!window) return;
      const elements = Array.from(document.querySelectorAll("*"));
      elements.forEach((element)=>{
          if (!checkIsHTMLElement(element)) return;
          const style = window.getComputedStyle(element);
          const position = style.position;
          if (position === "fixed") {
              setAndBackupPosition(element, "absolute");
          } else if (position === "sticky") {
              setAndBackupPosition(element, "relative");
          }
      });
  }
  /**
   * Restore the position of elements.
   */ function restoreElementPositions(document) {
      const window = document.defaultView;
      if (!window) return;
      const elements = Array.from(document.querySelectorAll("*"));
      elements.forEach((element)=>{
          if (!checkIsHTMLElement(element)) return;
          const position = element.getAttribute("data-argos-bck-position");
          if (position === "unset") {
              element.style.removeProperty("position");
          } else if (position) {
              element.style.position = position;
          }
      });
  }
  function addGlobalClass(document, className) {
      document.documentElement.classList.add(className);
  }
  function removeGlobalClass(document, className) {
      document.documentElement.classList.remove(className);
  }
  /**
   * Setup the document for screenshots.
   */ function setup(document, { fullPage, argosCSS } = {}) {
      addGlobalClass(document, "__argos__");
      injectGlobalStyles(document, GLOBAL_CSS, "argos-reset-style");
      if (argosCSS) {
          injectGlobalStyles(document, argosCSS, "argos-user-style");
      }
      disableSpellCheck(document);
      if (fullPage) {
          stabilizeElementPositions(document);
      }
  }
  /**
   * Restore the document after screenshots.
   */ function teardown(document, { fullPage, argosCSS } = {}) {
      removeGlobalClass(document, "__argos__");
      removeGlobalStyles(document, "argos-reset-style");
      if (argosCSS) {
          removeGlobalStyles(document, "argos-user-style");
      }
      restoreSpellCheck(document);
      if (fullPage) {
          restoreElementPositions(document);
      }
  }
  /**
   * Wait for the fonts to be loaded.
   */ function waitForFontsToLoad(document) {
      return document.fonts.status === "loaded";
  }
  /**
   * Wait for the images to be loaded.
   */ function waitForImagesToLoad(document) {
      const images = Array.from(document.images);
      // Force eager loading
      images.forEach((img)=>{
          // Force sync decoding
          if (img.decoding !== "sync") {
              img.decoding = "sync";
          }
          // Force eager loading
          if (img.loading !== "eager") {
              img.loading = "eager";
          }
      });
      return images.every((img)=>img.complete);
  }
  /**
   * Wait for all [aria-busy="true"] elements to invisible.
   */ function waitForNoBusy(document) {
      const checkIsVisible = (element)=>{
          // Basic check for HTMLElement
          if (element instanceof HTMLElement && (element.offsetHeight !== 0 || element.offsetWidth !== 0)) {
              return true;
          }
          // Check for HTMLElement & SVGElement
          return element.getClientRects().length > 0;
      };
      const elements = Array.from(document.querySelectorAll('[aria-busy="true"]'));
      return elements.every((element)=>!checkIsVisible(element));
  }
  /**
   * Wait for the document to be stable.
   */ function waitForStability(document) {
      const results = [
          waitForNoBusy(document),
          waitForImagesToLoad(document),
          waitForFontsToLoad(document)
      ];
      return results.every(Boolean);
  }

  /**
   * Get the current color scheme of the user.
   */ function getColorScheme(window) {
      return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
  }
  /**
   * Get the current media type of the user.
   */ function getMediaType(window) {
      return window.matchMedia("print").matches ? "print" : "screen";
  }

  const ArgosGlobal = {
      waitForStability: ()=>waitForStability(document),
      setup: (options = {})=>setup(document, options),
      teardown: (options = {})=>teardown(document, options),
      getColorScheme: ()=>getColorScheme(window),
      getMediaType: ()=>getMediaType(window)
  };
  window.__ARGOS__ = ArgosGlobal;

})();
