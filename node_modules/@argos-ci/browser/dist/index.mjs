const viewportPresets = {
    "macbook-16": {
        width: 1536,
        height: 960
    },
    "macbook-15": {
        width: 1440,
        height: 900
    },
    "macbook-13": {
        width: 1280,
        height: 800
    },
    "macbook-11": {
        width: 1366,
        height: 768
    },
    "ipad-2": {
        width: 768,
        height: 1024
    },
    "ipad-mini": {
        width: 768,
        height: 1024
    },
    "iphone-xr": {
        width: 414,
        height: 896
    },
    "iphone-x": {
        width: 375,
        height: 812
    },
    "iphone-6+": {
        width: 414,
        height: 736
    },
    "iphone-se2": {
        width: 375,
        height: 667
    },
    "iphone-8": {
        width: 375,
        height: 667
    },
    "iphone-7": {
        width: 375,
        height: 667
    },
    "iphone-6": {
        width: 375,
        height: 667
    },
    "iphone-5": {
        width: 320,
        height: 568
    },
    "iphone-4": {
        width: 320,
        height: 480
    },
    "iphone-3": {
        width: 320,
        height: 480
    },
    "samsung-s10": {
        width: 360,
        height: 760
    },
    "samsung-note9": {
        width: 414,
        height: 846
    }
};
function resolveViewportPreset(preset, orientation) {
    const { width, height } = viewportPresets[preset];
    return orientation === "portrait" ? {
        width,
        height
    } : {
        width: height,
        height: width
    };
}
function checkIsViewportPresetOption(value) {
    return typeof value === "object" && value !== null && "preset" in value;
}
function resolveViewport(viewportOption) {
    if (checkIsViewportPresetOption(viewportOption)) {
        return resolveViewportPreset(viewportOption.preset, viewportOption.orientation ?? "portrait");
    }
    if (typeof viewportOption === "string") {
        return resolveViewportPreset(viewportOption, "portrait");
    }
    return viewportOption;
}

/**
 * Read the global script and return it as a string.
 */ function getGlobalScript() {
    return "(function () {\n  'use strict';\n\n  /**\n   * CSS to stabilize visual tests:\n   * - Hide carets\n   * - Hide scrollbars\n   * - Support [data-visual-test]\n   * - Support [data-visual-test-no-radius]\n   */ const GLOBAL_CSS = `\n/* Hide carets */\n* {\n  caret-color: transparent !important;\n}\n\n/* Hide scrollbars */\n::-webkit-scrollbar {\n  display: none !important;\n}\n\n/* Make the element transparent */\n[data-visual-test=\"transparent\"] {\n  color: transparent !important;\n  font-family: monospace !important;\n  opacity: 0 !important;\n}\n\n/* Remove the element */\n[data-visual-test=\"removed\"] {\n  display: none !important;\n}\n\n/* Disable radius */\n[data-visual-test-no-radius]:not([data-visual-test-no-radius=\"false\"]) {\n  border-radius: 0 !important;\n}\n`;\n  /**\n   * Set the position of an element and backup the previous one.\n   */ function setAndBackupSpellcheck(element, spellcheck) {\n      element.setAttribute(\"data-argos-bck-position\", element.getAttribute(\"spellcheck\") ?? \"unset\");\n      element.setAttribute(\"spellcheck\", spellcheck);\n  }\n  const SPELL_CHECK_QUERY = \"[contenteditable]:not([contenteditable=false]):not([spellcheck=false]), input:not([spellcheck=false]), textarea:not([spellcheck=false])\";\n  /**\n   * Disable spellcheck to avoid displaying markers.\n   */ function disableSpellCheck(document) {\n      const inputs = document.querySelectorAll(SPELL_CHECK_QUERY);\n      inputs.forEach((element)=>{\n          if (!checkIsHTMLElement(element)) return;\n          setAndBackupSpellcheck(element, \"false\");\n      });\n  }\n  /**\n   * Restore spellcheck attribute.\n   */ function restoreSpellCheck(document) {\n      const inputs = document.querySelectorAll(SPELL_CHECK_QUERY);\n      inputs.forEach((input)=>{\n          const spellcheck = input.getAttribute(\"data-argos-bck-spellcheck\");\n          if (spellcheck === \"unset\") {\n              input.removeAttribute(\"spellcheck\");\n          } else if (spellcheck) {\n              input.setAttribute(\"spellcheck\", spellcheck);\n          }\n      });\n  }\n  /**\n   * Inject global styles in the DOM.\n   */ function injectGlobalStyles(document, css, id) {\n      const style = document.createElement(\"style\");\n      style.textContent = css;\n      style.id = id;\n      document.head.appendChild(style);\n  }\n  /**\n   * Remove global styles from the DOM.\n   */ function removeGlobalStyles(document, id) {\n      const style = document.getElementById(id);\n      if (style) {\n          style.remove();\n      }\n  }\n  const checkIsHTMLElement = (element)=>{\n      return \"style\" in element;\n  };\n  /**\n   * Set the position of an element and backup the previous one.\n   */ function setAndBackupPosition(element, position) {\n      element.setAttribute(\"data-argos-bck-position\", element.style.position ?? \"unset\");\n      element.style.position = position;\n  }\n  /**\n   * Stabilize sticky and fixed elements.\n   */ function stabilizeElementPositions(document) {\n      const window = document.defaultView;\n      if (!window) return;\n      const elements = Array.from(document.querySelectorAll(\"*\"));\n      elements.forEach((element)=>{\n          if (!checkIsHTMLElement(element)) return;\n          const style = window.getComputedStyle(element);\n          const position = style.position;\n          if (position === \"fixed\") {\n              setAndBackupPosition(element, \"absolute\");\n          } else if (position === \"sticky\") {\n              setAndBackupPosition(element, \"relative\");\n          }\n      });\n  }\n  /**\n   * Restore the position of elements.\n   */ function restoreElementPositions(document) {\n      const window = document.defaultView;\n      if (!window) return;\n      const elements = Array.from(document.querySelectorAll(\"*\"));\n      elements.forEach((element)=>{\n          if (!checkIsHTMLElement(element)) return;\n          const position = element.getAttribute(\"data-argos-bck-position\");\n          if (position === \"unset\") {\n              element.style.removeProperty(\"position\");\n          } else if (position) {\n              element.style.position = position;\n          }\n      });\n  }\n  function addGlobalClass(document, className) {\n      document.documentElement.classList.add(className);\n  }\n  function removeGlobalClass(document, className) {\n      document.documentElement.classList.remove(className);\n  }\n  /**\n   * Setup the document for screenshots.\n   */ function setup(document, { fullPage, argosCSS } = {}) {\n      addGlobalClass(document, \"__argos__\");\n      injectGlobalStyles(document, GLOBAL_CSS, \"argos-reset-style\");\n      if (argosCSS) {\n          injectGlobalStyles(document, argosCSS, \"argos-user-style\");\n      }\n      disableSpellCheck(document);\n      if (fullPage) {\n          stabilizeElementPositions(document);\n      }\n  }\n  /**\n   * Restore the document after screenshots.\n   */ function teardown(document, { fullPage, argosCSS } = {}) {\n      removeGlobalClass(document, \"__argos__\");\n      removeGlobalStyles(document, \"argos-reset-style\");\n      if (argosCSS) {\n          removeGlobalStyles(document, \"argos-user-style\");\n      }\n      restoreSpellCheck(document);\n      if (fullPage) {\n          restoreElementPositions(document);\n      }\n  }\n  /**\n   * Wait for the fonts to be loaded.\n   */ function waitForFontsToLoad(document) {\n      return document.fonts.status === \"loaded\";\n  }\n  /**\n   * Wait for the images to be loaded.\n   */ function waitForImagesToLoad(document) {\n      const images = Array.from(document.images);\n      // Force eager loading\n      images.forEach((img)=>{\n          // Force sync decoding\n          if (img.decoding !== \"sync\") {\n              img.decoding = \"sync\";\n          }\n          // Force eager loading\n          if (img.loading !== \"eager\") {\n              img.loading = \"eager\";\n          }\n      });\n      return images.every((img)=>img.complete);\n  }\n  /**\n   * Wait for all [aria-busy=\"true\"] elements to invisible.\n   */ function waitForNoBusy(document) {\n      const checkIsVisible = (element)=>{\n          // Basic check for HTMLElement\n          if (element instanceof HTMLElement && (element.offsetHeight !== 0 || element.offsetWidth !== 0)) {\n              return true;\n          }\n          // Check for HTMLElement & SVGElement\n          return element.getClientRects().length > 0;\n      };\n      const elements = Array.from(document.querySelectorAll('[aria-busy=\"true\"]'));\n      return elements.every((element)=>!checkIsVisible(element));\n  }\n  /**\n   * Wait for the document to be stable.\n   */ function waitForStability(document) {\n      const results = [\n          waitForNoBusy(document),\n          waitForImagesToLoad(document),\n          waitForFontsToLoad(document)\n      ];\n      return results.every(Boolean);\n  }\n\n  /**\n   * Get the current color scheme of the user.\n   */ function getColorScheme(window) {\n      return window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\";\n  }\n  /**\n   * Get the current media type of the user.\n   */ function getMediaType(window) {\n      return window.matchMedia(\"print\").matches ? \"print\" : \"screen\";\n  }\n\n  const ArgosGlobal = {\n      waitForStability: ()=>waitForStability(document),\n      setup: (options = {})=>setup(document, options),\n      teardown: (options = {})=>teardown(document, options),\n      getColorScheme: ()=>getColorScheme(window),\n      getMediaType: ()=>getMediaType(window)\n  };\n  window.__ARGOS__ = ArgosGlobal;\n\n})();\n";
}

export { getGlobalScript, resolveViewport };
