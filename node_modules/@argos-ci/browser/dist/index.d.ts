type ViewportOrientation = "portrait" | "landscape";
type ViewportSize = {
    width: number;
    height: number;
};
declare const viewportPresets: {
    readonly "macbook-16": {
        readonly width: 1536;
        readonly height: 960;
    };
    readonly "macbook-15": {
        readonly width: 1440;
        readonly height: 900;
    };
    readonly "macbook-13": {
        readonly width: 1280;
        readonly height: 800;
    };
    readonly "macbook-11": {
        readonly width: 1366;
        readonly height: 768;
    };
    readonly "ipad-2": {
        readonly width: 768;
        readonly height: 1024;
    };
    readonly "ipad-mini": {
        readonly width: 768;
        readonly height: 1024;
    };
    readonly "iphone-xr": {
        readonly width: 414;
        readonly height: 896;
    };
    readonly "iphone-x": {
        readonly width: 375;
        readonly height: 812;
    };
    readonly "iphone-6+": {
        readonly width: 414;
        readonly height: 736;
    };
    readonly "iphone-se2": {
        readonly width: 375;
        readonly height: 667;
    };
    readonly "iphone-8": {
        readonly width: 375;
        readonly height: 667;
    };
    readonly "iphone-7": {
        readonly width: 375;
        readonly height: 667;
    };
    readonly "iphone-6": {
        readonly width: 375;
        readonly height: 667;
    };
    readonly "iphone-5": {
        readonly width: 320;
        readonly height: 568;
    };
    readonly "iphone-4": {
        readonly width: 320;
        readonly height: 480;
    };
    readonly "iphone-3": {
        readonly width: 320;
        readonly height: 480;
    };
    readonly "samsung-s10": {
        readonly width: 360;
        readonly height: 760;
    };
    readonly "samsung-note9": {
        readonly width: 414;
        readonly height: 846;
    };
};
type ViewportPreset = keyof typeof viewportPresets;
type ViewportPresetOption = {
    preset: ViewportPreset;
    orientation?: ViewportOrientation;
};
type ViewportOption = ViewportSize | ViewportPresetOption | ViewportPreset;
declare function resolveViewport(viewportOption: ViewportOption): ViewportSize;
type SetupOptions = {
    fullPage?: boolean;
    argosCSS?: string;
};
type TeardownOptions = {
    fullPage?: boolean;
    argosCSS?: string;
};
declare const ArgosGlobal: {
    waitForStability: () => boolean;
    setup: (options?: SetupOptions) => void;
    teardown: (options?: TeardownOptions) => void;
    getColorScheme: () => "dark" | "light";
    getMediaType: () => "print" | "screen";
};
type ArgosGlobal = typeof ArgosGlobal;
/**
 * Read the global script and return it as a string.
 */
declare function getGlobalScript(): string;
export { ViewportOrientation, ViewportPreset, ViewportPresetOption, ViewportOption, resolveViewport, getGlobalScript };
export type { ArgosGlobal };
