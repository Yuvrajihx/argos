interface UploadParameters {
    /** Globs matching image file paths to upload */
    files?: string[];
    /** Root directory to look for image to upload (default to current directory) */
    root?: string;
    /** Globs matching image file paths to ignore (default to "**\/*.\{png,jpg,jpeg\}") */
    ignore?: string[];
    /** Base URL of Argos API (default to "https://api.argos-ci.com/v2/") */
    apiBaseUrl?: string;
    /** Git commit */
    commit?: string;
    /** Git branch */
    branch?: string;
    /** Argos repository token */
    token?: string;
    /** Pull-request number */
    prNumber?: number;
    /** Name of the build used to trigger multiple Argos builds on one commit */
    buildName?: string;
    /** Parallel test suite mode */
    parallel?: {
        /** Unique build ID for this parallel build */
        nonce: string;
        /** The number of parallel nodes being ran */
        total: number;
    } | false;
    /** Branch used as baseline for screenshot comparison */
    referenceBranch?: string;
    /** Commit used as baseline for screenshot comparison */
    referenceCommit?: string;
}
/**
 * Upload screenshots to argos-ci.com.
 */
declare function upload(params: UploadParameters): Promise<{
    build: {
        id: string;
        url: string;
    };
    screenshots: {
        hash: string;
        optimizedPath: string;
        metadata: import("@argos-ci/util").ScreenshotMetadata | null;
        pwTrace: {
            path: string;
            hash: string;
        } | null;
        name: string;
        path: string;
    }[];
}>;
interface Config {
    apiBaseUrl: string;
    commit: string;
    branch: string;
    token: string | null;
    buildName: string | null;
    parallel: boolean;
    parallelNonce: string | null;
    parallelTotal: number | null;
    referenceBranch: string | null;
    referenceCommit: string | null;
    owner: string | null;
    repository: string | null;
    jobId: string | null;
    runId: string | null;
    prNumber: number | null;
    prHeadCommit: string | null;
}
declare function readConfig(options?: Partial<Config>): Promise<Config>;
export { UploadParameters, upload, Config, readConfig };
