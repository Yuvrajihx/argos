import 'cypress-wait-until';
import { resolveViewport, getGlobalScript } from '@argos-ci/browser';
import { getScreenshotName, getMetadataPath } from '@argos-ci/util/browser';

var version = "1.5.2";

function injectArgos() {
    cy.window({
        log: false
    }).then((window)=>{
        if (typeof window.__ARGOS__ !== "undefined") return;
        window.eval(getGlobalScript());
    });
}
function setup(options) {
    const { argosCSS } = options;
    const fullPage = !options.capture || options.capture === "fullPage";
    cy.window({
        log: false
    }).then((window)=>window.__ARGOS__.setup({
            fullPage,
            argosCSS
        }));
    return ()=>{
        cy.window({
            log: false
        }).then((window)=>window.__ARGOS__.teardown({
                fullPage,
                argosCSS
            }));
    };
}
Cypress.Commands.add("argosScreenshot", {
    prevSubject: [
        "optional",
        "element",
        "window",
        "document"
    ]
}, (subject, name, options = {})=>{
    const { viewports, argosCSS, ...cypressOptions } = options;
    if (!name) {
        throw new Error("The `name` argument is required.");
    }
    Cypress.log({
        name: "argosScreenshot",
        displayName: `Argos Screenshot`,
        message: name
    });
    injectArgos();
    const teardown = setup(options);
    function stabilizeAndScreenshot(name) {
        cy.waitUntil(()=>cy.window({
                log: false
            }).then((window)=>window.__ARGOS__.waitForStability()));
        let ref = {};
        cy.wrap(subject).screenshot(name, {
            blackout: [
                '[data-visual-test="blackout"]'
            ].concat(options.blackout || []),
            onAfterScreenshot: (_$el, props)=>{
                ref.props = props;
            },
            ...cypressOptions
        });
        cy.window({
            log: false
        }).then((window)=>{
            const mediaType = window.__ARGOS__.getMediaType();
            const colorScheme = window.__ARGOS__.getColorScheme();
            const metadata = {
                url: window.location.href,
                viewport: {
                    width: window.innerWidth,
                    height: window.innerHeight
                },
                colorScheme,
                mediaType,
                test: {
                    title: Cypress.currentTest.title,
                    titlePath: Cypress.currentTest.titlePath,
                    retry: Cypress.currentRetry,
                    // @ts-ignore
                    retries: cy.state("runnable")._retries
                },
                browser: {
                    name: Cypress.browser.name,
                    version: Cypress.browser.version
                },
                automationLibrary: {
                    name: "cypress",
                    version: Cypress.version
                },
                sdk: {
                    name: "@argos-ci/cypress",
                    version
                }
            };
            cy.writeFile(getMetadataPath(ref.props.path), JSON.stringify(metadata));
        });
    }
    if (viewports) {
        for (const viewport of viewports){
            const viewportSize = resolveViewport(viewport);
            cy.viewport(viewportSize.width, viewportSize.height);
            stabilizeAndScreenshot(getScreenshotName(name, {
                viewportWidth: viewportSize.width
            }));
        }
        // Restore the original viewport
        cy.viewport(Cypress.config("viewportWidth"), Cypress.config("viewportHeight"));
    } else {
        stabilizeAndScreenshot(name);
    }
    teardown();
});
